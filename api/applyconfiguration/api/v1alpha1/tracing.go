// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/v1alpha1"
)

// TracingApplyConfiguration represents a declarative configuration of the Tracing type for use
// with apply.
type TracingApplyConfiguration struct {
	Provider          *ProviderApplyConfiguration `json:"provider,omitempty"`
	ClientSampling    *uint32                     `json:"clientSampling,omitempty"`
	RandomSampling    *uint32                     `json:"randomSampling,omitempty"`
	OverallSampling   *uint32                     `json:"overallSampling,omitempty"`
	Verbose           *bool                       `json:"verbose,omitempty"`
	MaxPathTagLength  *uint32                     `json:"maxPathTagLength,omitempty"`
	CustomTags        []*apiv1alpha1.CustomTag    `json:"customTags,omitempty"`
	SpawnUpstreamSpan *bool                       `json:"spawnUpstreamSpan,omitempty"`
}

// TracingApplyConfiguration constructs a declarative configuration of the Tracing type for use with
// apply.
func Tracing() *TracingApplyConfiguration {
	return &TracingApplyConfiguration{}
}

// WithProvider sets the Provider field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Provider field is set to the value of the last call.
func (b *TracingApplyConfiguration) WithProvider(value *ProviderApplyConfiguration) *TracingApplyConfiguration {
	b.Provider = value
	return b
}

// WithClientSampling sets the ClientSampling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientSampling field is set to the value of the last call.
func (b *TracingApplyConfiguration) WithClientSampling(value uint32) *TracingApplyConfiguration {
	b.ClientSampling = &value
	return b
}

// WithRandomSampling sets the RandomSampling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RandomSampling field is set to the value of the last call.
func (b *TracingApplyConfiguration) WithRandomSampling(value uint32) *TracingApplyConfiguration {
	b.RandomSampling = &value
	return b
}

// WithOverallSampling sets the OverallSampling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OverallSampling field is set to the value of the last call.
func (b *TracingApplyConfiguration) WithOverallSampling(value uint32) *TracingApplyConfiguration {
	b.OverallSampling = &value
	return b
}

// WithVerbose sets the Verbose field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Verbose field is set to the value of the last call.
func (b *TracingApplyConfiguration) WithVerbose(value bool) *TracingApplyConfiguration {
	b.Verbose = &value
	return b
}

// WithMaxPathTagLength sets the MaxPathTagLength field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxPathTagLength field is set to the value of the last call.
func (b *TracingApplyConfiguration) WithMaxPathTagLength(value uint32) *TracingApplyConfiguration {
	b.MaxPathTagLength = &value
	return b
}

// WithCustomTags adds the given value to the CustomTags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CustomTags field.
func (b *TracingApplyConfiguration) WithCustomTags(values ...**apiv1alpha1.CustomTag) *TracingApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithCustomTags")
		}
		b.CustomTags = append(b.CustomTags, *values[i])
	}
	return b
}

// WithSpawnUpstreamSpan sets the SpawnUpstreamSpan field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SpawnUpstreamSpan field is set to the value of the last call.
func (b *TracingApplyConfiguration) WithSpawnUpstreamSpan(value bool) *TracingApplyConfiguration {
	b.SpawnUpstreamSpan = &value
	return b
}
